/**
 * 路由类
 *
 * @author : sunkeysun
 */

import IClass from '../Support/Base/IClass'

export default Route extends IClass {
    _handler = null

    ROUTE_TYPES = {
        normal: 'normal',
        resource: 'resource',
        group: 'group',
        controller: 'controller',
    }

    constructor(handler, type='normal') {
        super()

        this._handler = handler
        this._type = type
    }

    handle(...args) {
        if (!!_.isFunction(this._handler)) {
            return this._handler.apply(null, [req, res, next])
        } else if (!!_.isString(this.handler)) {
            switch (this._type) {
                case 'normal':
                    return this._handleNormal.apply(this, args)
                case 'controller':
                    return this._handleController.apply(this, args)
                case 'resource':
                    return this._handleResource.apply(this, args)
                case 'group':
                    return this._handleGroup.apply(this, 'args')
            }
        }
    }

    _handleNormal(req, res, next) {
        if (!~this._handler.indexOf('@')) {
            throw new IException('action not exist.')
        }
        const handlerArr = this._handler.split('@')
        const controllerName = handlerArr[0]
        const actionName = handlerArr[1]

        const modulePath = app().controllerPath + controllerName
        const Controller = require(modulePath).default
        const controllerInstance = new Controller(req, res, next)

        if (!_.isFunction(controllerInstance[actionName])) {
            throw new IException('action not exist.')
        }

        return controllerInstance[actionName]()
    }

    _handleResource() {
        return true
    }

    _handleController() {
        return true
    }

    _handleGroup() {
        return true
    }
}
