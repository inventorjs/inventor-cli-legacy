/**
 * Http 主应用类
 *
 * @author : sunkeysun
 */

import CoreApp from 'koa'

import IClass from '../Support/IClass'
import GlobalRegister from '../Support/GlobalRegister'
import ConfigLoader from '../Support/ConfigLoader'
import LogServiceProvider from '../Log/LogServiceProvider'
import CacheServiceProvider from '../Cache/CacheServiceProvider'
import RoutingServiceProvider from '../Routing/RoutingServiceProvider'

export default class Application extends IClass {
    _coreApp = new CoreApp()
    _basePath = ''
    _logger = null
    _cache = null
    _session = null
    _singletons = {}
    _booted = false

    _envs = ['development', 'test', 'production']
    _env = 'production'

    constructor(basePath) {
        super()

        this._basePath = basePath
    }

    get configPath() {
        const targetPath = `${this._basePath}config/`
        return targetPath
    }

    get routesPath() {
        const targetPath = `${this._basePath}routes/`
        return targetPath
    }

    get vendorPath() {
        const targetPath = `${this._basePath}vendor/`
        return targetPath
    }

    get appPath() {
        const targetPath = `${this._basePath}app/`
        return targetPath
    }

    get controllerPath() {
        const targetPath = `${this.appPath}Http/Controllers/`
        return targetPath
    }

    get logger() {
        return this._logger
    }

    get cache() {
        return this._cache
    }

    get env() {
        return this._env
    }

    config(configName) {
        return ConfigLoader.load(configName)
    }

    _initEnv() {
        let env = 'production'
        if (!!~this._envs.indexOf(process.NODE_ENV)) {
            env = process.NODE_ENV
        }

        this._env = env
    }

    _registerGlobal() {
        _.extend(global, {

        })
    }

    registerSingleton(id, instance) {
        if (!!_.isUndefined(this._singletons[id])) {
            return false
        }

        this._singletons[id] = instance

        return this
    }

    unregisterSingleton(id) {
        if (!_.isUndefined(id)) {
            return false
        }

        _.unset(this._singletons, id)

        return this
    }

    _registerBaseServiceProvider() {
        this._logger = ( new LogServiceProvider() ).register()
        this._cache = ( new CacheServiceProvider() ).register()
        ( new SessionServiceProvider() ).register()
        ( new RoutingServiceProvider() ).register()
    }

    run() {
        if (!!this._booted) {
            throw new IException('Application can\'t rebooted.')
        }

        this._initEnv()
        this._registerGlobal()
        this._registerBaseServiceProvider()

        this._coreApp.listen(8000)
    }
}
